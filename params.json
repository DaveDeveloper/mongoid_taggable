{"name":"Mongoid Taggable","body":"Mongoid Taggable provides some helpers to create taggable documents.\r\n\r\n### Installation\r\n\r\nYou can simple install from rubygems:\r\n\r\n```\r\ngem install mongoid_taggable\r\n```\r\n\r\nor in Gemfile:\r\n\r\n```ruby\r\ngem 'mongoid_taggable'\r\n```\r\n\r\nor as a Rails Plugin:\r\n\r\n```\r\nscript/plugin install git://github.com/wilkerlucio/mongoid_taggable.git\r\n```\r\n\r\n### Basic Usage\r\n\r\nTo make a document taggable you need to include `Mongoid::Taggable` into your document:\r\n\r\n```ruby\r\nclass Post\r\n  include Mongoid::Document\r\n  include Mongoid::Taggable\r\n\r\n  field :title\r\n  field :content\r\nend\r\n```\r\n\r\nAnd in your form:\r\n\r\n```erb\r\n<% form_for @post do |f| %>\r\n  <p>\r\n    <%= f.label :title %><br />\r\n    <%= f.text_field :title %>\r\n  </p>\r\n  <p>\r\n    <%= f.label :content %><br />\r\n    <%= f.text_area :content %>\r\n  </p>\r\n  <p>\r\n    <%= f.label :tags %><br />\r\n    <%= f.text_field :tags %>\r\n  </p>\r\n  <p>\r\n    <button type=\"submit\">Send</button>\r\n  </p>\r\n<% end %>\r\n```\r\n\r\nIn this case, the text fields for tags should receive the list of tags separated by comma (See below for how to change the separator).\r\n\r\nThen your document will have the `tags` and `tags_array` getter and setter. `tags` is as a plain string with tags separated by comma, and `tags_array` an array representation.\r\n\r\n### Finding Objects by Tag\r\n\r\nTagged models get a scope called `tagged_with`, `tagged_with_all`, and `tagged_with_any`:\r\n\r\n```ruby\r\nMyModel.tagged_with('foo')\r\nMyModel.published.tagged_with('foo').count\r\nMyModel.tagged_with_all('foo', 'bar')\r\nMyModel.tagged_with_all(['foo', 'bar'])\r\nMyModel.tagged_with_any('foo', 'bar')\r\nMyModel.tagged_with_any(['foo', 'bar'])\r\n```\r\n\r\n### Tags Indexing\r\n\r\nThis module will automatically create an index of tags and their counts for you after saving the document. This can be used for a tag cloud. See the following example to understand how to use it:\r\n\r\n```ruby\r\nPost.create!(:tags => \"food,ant,bee\")\r\nPost.create!(:tags => \"juice,food,bee,zip\")\r\nPost.create!(:tags => \"honey,strip,food\")\r\n\r\nPost.tags # will retrieve [\"ant\", \"bee\", \"food\", \"honey\", \"juice\", \"strip\", \"zip\"]\r\nPost.tags_with_weight # will retrieve:\r\n# [\r\n#   ['ant', 1],\r\n#   ['bee', 2],\r\n#   ['food', 3],\r\n#   ['honey', 1],\r\n#   ['juice', 1],\r\n#   ['strip', 1],\r\n#   ['zip', 1]\r\n# ]\r\n```\r\n\r\nIf you don't want to use this feature, it is good to disable it to improve performance:\r\n\r\n```ruby\r\nclass Post\r\n  include Mongoid::Document\r\n  include Mongoid::Taggable\r\n\r\n  disable_tags_index! # will disable index creation\r\n\r\n  field :title\r\n  field :content\r\nend\r\n```\r\n\r\n### Changing default separator\r\n\r\nTo change the default separator you may call the `tags_separator` class method:\r\n\r\n```ruby\r\nclass Post\r\n  include Mongoid::Document\r\n  include Mongoid::Taggable\r\n\r\n  tags_separator ';' # will change tags separator to ;\r\n\r\n  field :title\r\n  field :content\r\nend\r\n```","tagline":"Mongoid taggable behaviour","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}